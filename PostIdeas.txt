..........................................................................................................................

Idea 1

Two people meeting at the ends of a narrow corridor, wanting to get to the other side.
processes == persons
resource == corridor
mutex == person can pass at a time. ie. Only one person can lock and use the corridor. 
         Unless he crosses the corridor and leaves it, person from other side can't lock to use the corridor.
busy waiting == person on each end keep checking for corridor to be vacated
monitor == people are given priority directly proportional to their age
starvation == less aged person might hae to wait forever


..........................................................................................................................

Idea 2


Jack and Jill happens to want to make a sandwich at the same time. 
Both need a slice of bread, so they both goes to get the loaf of bread and a knife.

Jack gets the knife first, while Jill gets the loaf of bread first. 
Now Jack tries to find the loaf of bread and Jill tries to find the knife, 
but both find that what they need to finish the task is already in use. 
If they both decide to wait until what they need is no longer in use, they will wait for each other forever. Deadlock.

..........................................................................................................................

Idea 3

There is a transmission channel, a Sender and a Receiver. At any point, either the sender can send a frame across the
channel, or the receiver can send an acknowledgement across the channel - ie, only one of the threads can take control
of the channel at any point.

-) frames are numbered alternatively with 0s and 1s, ie, any sequence of frames will have frame numbers in the form
 .. 01010101010101010..
 
-) when the sender sends frame 0, and the receiver receives it successfully, the latter sends an acknowledgement 1, 
meaning the next frame expected has frame number  = 1

-) Frames may either be garbled in transmission, or they may be lost. In both the cases, the receiver sends a negative
acknoqledgement and the sender must resend the frame

-) to detect the case when the frame is lost, there is a timer that runs out

-) the threads Sender and Receiver simulate 2 processes that have to be synchronized in order to work correctly, ie, 
  the sender has to send 0, and then wait for the acknowledgement 1 from the receiver and only then send 1, and so on
  .....................................................................................................................
  
     Above idea  can be implemented on string format data.
     
  -)frames can be character  or string ie sequence of character consider as a frame.Suppose a string to be send by sender(server) 
   to the reciver.A single character as a frame transfer to reciever(client) and  send acknowledgement
   to the sender.If sender(server) get acknowledgement of one frame than it send another,if not send again.
  
  -)Reciever recieve(client) all frame one by one and then combine all frame together to show the resultant data.

  -)There are two module Server and client.Both executable file open concurrently.Server will send data if 
    it is able to connect to client.  
  
 
 
